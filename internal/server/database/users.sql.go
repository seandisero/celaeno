// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, created_at, updated_at, hashed_password)
VALUES (?, ?, DATETIME('now'), DATETIME('now'), ?)
RETURNING id, username, created_at, updated_at
`

type CreateUserParams struct {
	ID             []byte
	Username       string
	HashedPassword string
}

type CreateUserRow struct {
	ID        []byte
	Username  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, displayname, created_at, updated_at, hashed_password FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id []byte) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Displayname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, displayname, created_at, updated_at, hashed_password FROM users
WHERE username = ?1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Displayname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const setUserDisplayName = `-- name: SetUserDisplayName :one
UPDATE users
SET displayname = ?1, updated_at = DATETIME('now')
WHERE id = ?2
RETURNING id, username, displayname, created_at, updated_at
`

type SetUserDisplayNameParams struct {
	Displayname sql.NullString
	ID          []byte
}

type SetUserDisplayNameRow struct {
	ID          []byte
	Username    string
	Displayname sql.NullString
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) SetUserDisplayName(ctx context.Context, arg SetUserDisplayNameParams) (SetUserDisplayNameRow, error) {
	row := q.db.QueryRowContext(ctx, setUserDisplayName, arg.Displayname, arg.ID)
	var i SetUserDisplayNameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Displayname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
